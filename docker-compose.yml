services:
  api:
    container_name: api
    image: node:20.17.0-alpine
    working_dir: /usr/src/app
    ports:
      - '3000:3000'
    command: >
      /bin/sh -c "
        echo Waiting for mongodb service start...;
        while ! nc -z mongo 27017;
        do
          sleep 1;
        done;
        npm run dev
      "
    init: true
    volumes:
      - .:/usr/src/app
    depends_on:
      - mongo
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`fastify.localhost`) && PathPrefix(`/api/v1`)'
      - 'traefik.http.routers.api.entrypoints=http'

  mongo:
    container_name: mongo
    image: 'bitnami/mongodb:4.4'
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - 'mongodb_data:/bitnami/mongodb'
    environment:
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mongo.entrypoints=http'

  postgresql:
    container_name: postgresql
    image: 'bitnami/postgresql:9.6'
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgresql_data:/bitnami/postgresql
    environment:
      POSTGRESQL_USER: ${POSTGRESQL_USER}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.postgresql.entrypoints=http'

  sonarqube:
    container_name: sonarqube
    image: bitnami/sonarqube:latest
    depends_on:
      - postgresql
    ports:
      - '9000:9000'
    volumes:
      - sonarqube_data:/bitnami
    environment:
      SONARQUBE_DATABASE_USER: ${POSTGRESQL_USER}
      SONARQUBE_DATABASE_NAME: ${POSTGRESQL_DATABASE}
      SONARQUBE_DATABASE_PASSWORD: ${POSTGRESQL_PASSWORD}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.sonarqube.rule=Host(`sonarqube.localhost`)'
      - 'traefik.http.routers.sonarqube.entrypoints=http'

  traefik:
    container_name: traefik
    image: traefik:v2.5.3
    command: --api.insecure=true --providers.docker --log.level=debug --accesslog=true
    ports:
      - '80:80'
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    labels:
      - 'traefik.http.routers.traefik.entrypoints=http'

volumes:
  postgresql_data:
    driver: local
  sonarqube_data:
    driver: local
  mongodb_data:
    driver: local
